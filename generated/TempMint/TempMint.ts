// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Received extends ethereum.Event {
  get params(): Received__Params {
    return new Received__Params(this);
  }
}

export class Received__Params {
  _event: Received;

  constructor(event: Received) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class nftClaimed extends ethereum.Event {
  get params(): nftClaimed__Params {
    return new nftClaimed__Params(this);
  }
}

export class nftClaimed__Params {
  _event: nftClaimed;

  constructor(event: nftClaimed) {
    this._event = event;
  }

  get nftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TempMint__fetchNFTsCreatedResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }

  get minter(): Address {
    return this[2].toAddress();
  }
}

export class TempMint__fetchNFTsCreatedByAddressResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }

  get minter(): Address {
    return this[2].toAddress();
  }
}

export class TempMint extends ethereum.SmartContract {
  static bind(address: Address): TempMint {
    return new TempMint("TempMint", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEV_ROLE(): Bytes {
    let result = super.call("DEV_ROLE", "DEV_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEV_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DEV_ROLE", "DEV_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fetchMintPrice(): BigInt {
    let result = super.call("fetchMintPrice", "fetchMintPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fetchMintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fetchMintPrice",
      "fetchMintPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchNFTsCreated(): Array<TempMint__fetchNFTsCreatedResultValue0Struct> {
    let result = super.call(
      "fetchNFTsCreated",
      "fetchNFTsCreated():((uint256,address,address)[])",
      []
    );

    return result[0].toTupleArray<
      TempMint__fetchNFTsCreatedResultValue0Struct
    >();
  }

  try_fetchNFTsCreated(): ethereum.CallResult<
    Array<TempMint__fetchNFTsCreatedResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchNFTsCreated",
      "fetchNFTsCreated():((uint256,address,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<TempMint__fetchNFTsCreatedResultValue0Struct>()
    );
  }

  fetchNFTsCreatedByAddress(
    minter: Address
  ): Array<TempMint__fetchNFTsCreatedByAddressResultValue0Struct> {
    let result = super.call(
      "fetchNFTsCreatedByAddress",
      "fetchNFTsCreatedByAddress(address):((uint256,address,address)[])",
      [ethereum.Value.fromAddress(minter)]
    );

    return result[0].toTupleArray<
      TempMint__fetchNFTsCreatedByAddressResultValue0Struct
    >();
  }

  try_fetchNFTsCreatedByAddress(
    minter: Address
  ): ethereum.CallResult<
    Array<TempMint__fetchNFTsCreatedByAddressResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchNFTsCreatedByAddress",
      "fetchNFTsCreatedByAddress(address):((uint256,address,address)[])",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        TempMint__fetchNFTsCreatedByAddressResultValue0Struct
      >()
    );
  }

  fetchNFTsCreatedCount(): BigInt {
    let result = super.call(
      "fetchNFTsCreatedCount",
      "fetchNFTsCreatedCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fetchNFTsCreatedCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fetchNFTsCreatedCount",
      "fetchNFTsCreatedCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintPrice(): BigInt {
    let result = super.call("mintPrice", "mintPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintPrice", "mintPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftAddress(): Address {
    let result = super.call("nftAddress", "nftAddress():(address)", []);

    return result[0].toAddress();
  }

  try_nftAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftAddress", "nftAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftsRedeemed(): BigInt {
    let result = super.call("nftsRedeemed", "nftsRedeemed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftsRedeemed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftsRedeemed", "nftsRedeemed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMintPrice(_price: BigInt): boolean {
    let result = super.call("setMintPrice", "setMintPrice(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_price)
    ]);

    return result[0].toBoolean();
  }

  try_setMintPrice(_price: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("setMintPrice", "setMintPrice(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_price)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setNftAddress(_nftAddress: Address): boolean {
    let result = super.call("setNftAddress", "setNftAddress(address):(bool)", [
      ethereum.Value.fromAddress(_nftAddress)
    ]);

    return result[0].toBoolean();
  }

  try_setNftAddress(_nftAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setNftAddress",
      "setNftAddress(address):(bool)",
      [ethereum.Value.fromAddress(_nftAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get deployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RedeemForNftCall extends ethereum.Call {
  get inputs(): RedeemForNftCall__Inputs {
    return new RedeemForNftCall__Inputs(this);
  }

  get outputs(): RedeemForNftCall__Outputs {
    return new RedeemForNftCall__Outputs(this);
  }
}

export class RedeemForNftCall__Inputs {
  _call: RedeemForNftCall;

  constructor(call: RedeemForNftCall) {
    this._call = call;
  }

  get howMany(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toWhom(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class RedeemForNftCall__Outputs {
  _call: RedeemForNftCall;

  constructor(call: RedeemForNftCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetMintPriceCall extends ethereum.Call {
  get inputs(): SetMintPriceCall__Inputs {
    return new SetMintPriceCall__Inputs(this);
  }

  get outputs(): SetMintPriceCall__Outputs {
    return new SetMintPriceCall__Outputs(this);
  }
}

export class SetMintPriceCall__Inputs {
  _call: SetMintPriceCall;

  constructor(call: SetMintPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintPriceCall__Outputs {
  _call: SetMintPriceCall;

  constructor(call: SetMintPriceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetNftAddressCall extends ethereum.Call {
  get inputs(): SetNftAddressCall__Inputs {
    return new SetNftAddressCall__Inputs(this);
  }

  get outputs(): SetNftAddressCall__Outputs {
    return new SetNftAddressCall__Outputs(this);
  }
}

export class SetNftAddressCall__Inputs {
  _call: SetNftAddressCall;

  constructor(call: SetNftAddressCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftAddressCall__Outputs {
  _call: SetNftAddressCall;

  constructor(call: SetNftAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawAmountFromContractCall extends ethereum.Call {
  get inputs(): WithdrawAmountFromContractCall__Inputs {
    return new WithdrawAmountFromContractCall__Inputs(this);
  }

  get outputs(): WithdrawAmountFromContractCall__Outputs {
    return new WithdrawAmountFromContractCall__Outputs(this);
  }
}

export class WithdrawAmountFromContractCall__Inputs {
  _call: WithdrawAmountFromContractCall;

  constructor(call: WithdrawAmountFromContractCall) {
    this._call = call;
  }

  get _add(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawAmountFromContractCall__Outputs {
  _call: WithdrawAmountFromContractCall;

  constructor(call: WithdrawAmountFromContractCall) {
    this._call = call;
  }
}
